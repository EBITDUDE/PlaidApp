# Personal Finance App - Setup Guide

This document provides instructions for setting up your personal finance app with Python, Flask, and the Plaid API.

## Project Structure

Ensure your project is organized as follows:

```
/your_project_directory/
├── app.py                 (Main application file)
├── plaid_client.py        (Plaid API client)
├── templates/             (Directory for HTML templates)
│   ├── index.html         (Main application page)
│   └── log_viewer.html    (Log viewer page)
└── simple_test/           (Created automatically for data storage)
    ├── tokens.json        (Stores access tokens)
    ├── transactions.json  (Stores transaction modifications)
    └── finance_app.log    (Application logs)
```

## Setup Steps

1. **Create necessary directories**:
   ```bash
   mkdir -p templates simple_test
   ```

2. **Install required dependencies**:
   ```bash
   pip install flask plaid-python
   ```

3. **Place the files in the correct locations**:
   - Place `app.py` and `plaid_client.py` in the root directory
   - Place `index.html` and `log_viewer.html` in the `templates` directory

4. **Run the application**:
   ```bash
   python app.py
   ```

5. **Access the application**:
   - Main app: http://localhost:5000/
   - Log viewer: http://localhost:5000/logs

## New Features Added

1. **Enhanced UI and Usability**:
   - Tabular format for transactions
   - Connected accounts display
   - Better visual styling

2. **Transaction Management**:
   - Edit all transaction fields (date, amount, category, merchant)
   - Add manual transactions
   - Search and filter transactions

3. **Data Analysis**:
   - Monthly category totals by month
   - Transaction categorization

4. **Diagnostic Tools**:
   - Comprehensive logging system
   - Log viewer interface

## Troubleshooting

### Common Issues and Solutions

1. **Template Not Found Error**:
   - Ensure your templates are in a directory named `templates` in the project root
   - Check file permissions on the template files

2. **Database/File Access Errors**:
   - Ensure the application has write permissions to the `simple_test` directory
   - Check if JSON files exist and are valid

3. **Plaid API Errors**:
   - Verify your Plaid credentials in `plaid_client.py`
   - Check the logs for detailed error messages

4. **Format Errors in Transactions**:
   - Check the format of manual transactions (especially dates and amounts)
   - Look for inconsistencies in JSON data

### Using the Log Viewer

1. Access the log viewer at http://localhost:5000/logs
2. Use filters to focus on specific log levels (ERROR, WARNING, etc.)
3. Search for specific terms within logs
4. Click "Refresh Logs" to see the latest log entries

### How to Share Errors

If you encounter errors, you can:

1. **Share the log file**: The log file is located at `simple_test/finance_app.log`
2. **Take a screenshot of the log viewer**: Access http://localhost:5000/logs and take a screenshot
3. **Copy specific error messages**: Look for entries with level [ERROR] in the logs

## Future Enhancements

Planned future enhancements include:

1. Data visualization with charts and graphs
2. Budget planning features
3. Recurring transaction detection
4. Export functionality for reports
5. Mobile-responsive design improvements

## File Descriptions

### app.py
The main application file containing Flask routes and business logic.

### plaid_client.py
Contains Plaid API client configuration and authentication.

### index.html
The main user interface for the finance application.

### log_viewer.html
A utility page for viewing application logs.

## API Endpoints

- `/`: Main application interface
- `/logs`: Log viewer interface
- `/api/logs`: Get log data (JSON)
- `/has_access_token`: Check if a token exists
- `/create_link_token`: Create a Plaid Link token
- `/exchange_public_token`: Exchange a public token for an access token
- `/get_accounts`: Get connected accounts
- `/get_transactions`: Get transaction data
- `/update_transaction`: Update a transaction
- `/add_transaction`: Add a manual transaction
